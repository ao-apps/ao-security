<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-security - Best-practices security made usable.
Copyright (C) 2020  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-security.

ao-security is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-security is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-security.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://aoindustries.com/ao-taglib/"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:changelog="https://semanticcms.com/changelog/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" />
	<jsp:directive.page session="false" />
	<core:page
		title="@{documented.name} Changelog"
		shortTitle="Changelog"
		tocLevels="1"
		datePublished="2020-12-19T21:29:44-06:00"
		dateModified="2020-12-24T23:20:38-06:00"
	>
		<c:if test="${fn:endsWith('@{project.version}', '-SNAPSHOT') and !fn:endsWith('@{project.version}', '-POST-SNAPSHOT')}">
			<changelog:release
				projectName="@{documented.name}"
				version="@{project.version}"
				groupId="@{project.groupId}"
				artifactId="@{documented.artifactId}"
				scmUrl="@{project.scm.url}"
			>
				<ul>
					<li>
						Pulled existing security utilities out of <core:link book="/ao-lang" page="/index.jspx" /> into
						this new <core:link page="index.jspx" /> project.
					</li>
					<li>Added SQL implementation in alternate "sql" classifier.</li>
					<li>Length-constant time equality checks <code>Identifier</code>.</li>
					<li><code>HashedKey</code> improvements:
						<ol>
							<li>New constant <code>NO_KEY</code> that must be used when there is no key.</li>
							<li>
								Now supports multiple algorithms, with the recommended algorithm being "SHA-512".
								Previously, all keys were "SHA-256".
							</li>
							<li>
								<p>
									For the SHA-* algorithms (with the exception of SHA-1 explained below), the key length
									now defaults to half that of the hash length.  This is selected so the likelihood to
									guess the original key is equal to the hash's expected collision resistance.
								</p>
								<p>
									<ao:a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-107r1.pdf">NIST 800-107: 4.1 Hash Function Properties</ao:a>:
								</p>
								<blockquote>
									The expected collision-resistance strength of a hash function is half the length of
									the hash value produced by that hash function.
								</blockquote>
								<p>
									SHA-256 still allows a 256-bit key for compatibility, but new keys will be generated
									with 128 bits.  However, given that the default algorithm has also been changed to
									"SHA-512", expect the same default key length (URL parameter and cookie value lengths
									will not change).
								</p>
								<p>
									For SHA-1, which is deprecated and should not be used anyway, we have further reduced
									the key size to 64 bits (instead of the 80 bits it would be if assumed half the hash size).
									This is because SHA-1 is now considered to have at best 65-bits of collision resistance.
									If using SHA-1 (which you shouldn't) its key size is correspondingly limited to 64 bits.
									See:
								</p>
								<ul>
									<li><ao:a href="https://blog.cloudflare.com/why-its-harder-to-forge-a-sha-1-certificate-than-it-is-to-find-a-sha-1-collision/">Why itâ€™s harder to forge a SHA-1 certificate than it is to find a SHA-1 collision</ao:a></li>
									<li><ao:a href="https://marc-stevens.nl/research/papers/PhD%20Thesis%20Marc%20Stevens%20-%20Attacks%20on%20Hash%20Functions%20and%20Applications.pdf">Attacks on Hash Functions and Applications - PhD Thesis Marc Stevens - Attacks on Hash Functions and Applications.pdf</ao:a></li>
								</ul>
							</li>
							<li>Length-constant time equality checks</li>
							<li><code>compareTo(HashedKey)</code> now orders unsigned</li>
							<li>
								<p>
									<code>toString()</code> and a new <code>valueOf(String)</code> now represent the hashed
									key in an unambiguous string format.  "*" represents "No key".
								</p>
								<p>
									This may be used to insert the password into a database, and it is compatible with
									<ao:a href="https://aoindustries.com/ao-dbc/apidocs/com/aoindustries/dbc/AutoObjectFactory.html">AutoObjectFactory</ao:a>.
									However, a PostgreSQL composite type is provided in the alternate "sql" classifier.
									This type is more compact and enforces much more integrity than just stuffing the
									value in as a string.
								</p>
							</li>
							<li>Is now <code><ao:a rel="nofollow" href="@{javadoc.link.javase}java/io/Serializable.html">Serializable</ao:a></code>.</li>
							<li>
								New main method that can be used to generate a key and hash pair.  Includes a <code>-b</code>
								option for benchmark mode, which runs all algorithms and gives timings.
							</li>
						</ol>
					</li>
					<li><code>HashedPassword</code> improvements:
						<ol>
							<li>New constant <code>NO_PASSWORD</code> that must be used when there is no password.</li>
							<li>Now supports multiple algorithms, with the recommended algorithm being "PBKDF2WithHmacSHA512".</li>
							<li>
								Per-algorithm recommended iterations, with values increased significantly higher than
								the previously recommended <code>1000</code>.  Recommended values are selected to complete
								the hashing in around 100 ms on commodity PC hardware from around the year 2012.
							</li>
							<li>
								New method <code>isRehashRecommended()</code> that provides a hint when the password
								should be rehashed during login.
							</li>
							<li>
								<p>
									<code>toString()</code> and a new <code>valueOf(String)</code> now represent the hashed
									password in an unambiguous string format.  "*" represents "No key".
								</p>
								<p>
									This may be used to insert the password into a database, and it is compatible with
									<ao:a href="https://aoindustries.com/ao-dbc/apidocs/com/aoindustries/dbc/AutoObjectFactory.html">AutoObjectFactory</ao:a>.
									However, a PostgreSQL composite type is provided in the alternate "sql" classifier.
									This type is more compact and enforces much more integrity than just stuffing the
									value in as a string.
								</p>
							</li>
							<li>Is now <code><ao:a rel="nofollow" href="@{javadoc.link.javase}java/io/Serializable.html">Serializable</ao:a></code>.</li>
							<li>
								New main method that can be used to hash passwords.  Includes a <code>-b</code> option
								for benchmark mode, which runs all algorithms, gives timings, and will recommend increasing
								<code>recommendedIterations</code> when a hash is performed in under 100 ms.
							</li>
							<li>Convenience constructors that perform all the steps of generating salt and hash.</li>
						</ol>
					</li>
					<li>
						Moved read/write methods for <code>Identifier</code> and <code>SmallIdentifier</code> from
						<code>StreamableInput</code> and <code>StreamableOutput</code> to static methods on a new
						<code>SecurityStreamables</code> class.
					</li>
					<li>
						Deprecated <code>UnixCrypt</code> in favor of the <ao:a href="https://commons.apache.org/proper/commons-codec/">Apache Commons Codec</ao:a>
						implementation: <code><ao:a href="https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/UnixCrypt.html">UnixCrypt</ao:a></code>.
					</li>
				</ul>
			</changelog:release>
		</c:if>
	</core:page>
</jsp:root>
